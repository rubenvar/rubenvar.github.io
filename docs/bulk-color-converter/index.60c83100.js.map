{"mappings":"gBACMA,EAAYC,SAASC,eAAe,OACpCC,EAAUF,SAASC,eAAe,WAClCE,EAASH,SAASC,eAAe,UACjCG,EAAQJ,SAASC,eAAe,SAEhCI,EAAQ,sFAyEdH,EAAQI,iBAAiB,SAAS,eAC1BC,EAASR,EAAUS,MAEtBC,MAAM,KACNC,KAAI,SAACC,UAAMA,EAAEC,QAAQ,KAAM,OAC3BF,KAAI,SAACC,UAAMA,EAAEC,QAAQ,MAAO,OAC5BC,QAAO,SAACF,SAAY,KAANA,KAEdD,KAAI,SAACC,UA/EV,SAAsBG,OAENT,EAAMU,KAAKD,GACpBE,MAAAA,IAAiBC,MAAAA,GAAAA,OAASH,EAAAA,gCAU3BI,EACAC,EACAC,EACAC,EAXEC,EAAMR,EAAIF,QAAQ,IAAK,IAEvBW,EAAYD,EAAIE,OAGhBC,EAAyB,IAAdF,GAAiC,IAAdA,KASlB,IAAdA,GAAiC,IAAdA,EACrBL,GAAAA,KAAAA,OAAUI,EAAI,IAAAI,OAAKJ,EAAI,IACvBH,GAAAA,KAAAA,OAAUG,EAAI,IAAAI,OAAKJ,EAAI,IACvBF,GAAAA,KAAAA,OAAUE,EAAI,IAAAI,OAAKJ,EAAI,IACnBG,IAAUJ,GAAAA,KAAAA,OAAUC,EAAI,IAAAI,OAAKJ,EAAI,aACd,IAAdC,GAAiC,IAAdA,YAKbN,MAAAA,GAAAA,OAASH,EAAAA,4BAJxBI,GAAAA,KAAAA,OAAUI,EAAI,IAAAI,OAAKJ,EAAI,IACvBH,GAAAA,KAAAA,OAAUG,EAAI,IAAAI,OAAKJ,EAAI,IACvBF,GAAAA,KAAAA,OAAUE,EAAI,IAAAI,OAAKJ,EAAI,IACnBG,IAAUJ,GAAAA,KAAAA,OAAUC,EAAI,IAAAI,OAAKJ,EAAI,KAKvCJ,GAAK,IACLC,GAAK,IACLC,GAAK,IACDK,IAAUJ,GAAKA,EAAI,KAAKM,QAAQ,QAQhChB,EALEiB,EAAMC,KAAKD,IAAIV,EAAGC,EAAGC,GACrBU,EAAMD,KAAKC,IAAIZ,EAAGC,EAAGC,GACrBW,EAAQD,EAAMF,EAKN,IAAVG,EAAapB,EAAI,EAEZmB,IAAQZ,EAAGP,GAAMQ,EAAIC,GAAKW,EAAS,EACnCD,IAAQX,EAAGR,GAAKS,EAAIF,GAAKa,EAAQ,EACjCD,IAAQV,IAAGT,GAAKO,EAAIC,GAAKY,EAAQ,IAE1CpB,EAAIkB,KAAKG,MAAU,GAAJrB,IAEP,IAAGA,GAAK,SAGZsB,GAAKH,EAAMF,GAAO,EAGlBM,EAAc,IAAVH,EAAc,EAAIA,GAAS,EAAIF,KAAKM,IAAI,EAAIF,EAAI,WAGxDA,IAAU,IAAJA,GAASN,QAAQ,GACvBO,IAAU,IAAJA,GAASP,QAAQ,GAGnBF,EAAAA,QAAAA,OAAyBd,EAAAA,MAAAA,OAAMuB,EAAAA,OAAAA,OAAOD,EAAAA,OAAAA,OAAOZ,EAAAA,mBACnCV,EAAAA,MAAAA,OAAMuB,EAAAA,OAAAA,OAAOD,EAAAA,MAWbG,CAAazB,MAExB0B,KAAK,MAERlC,EAAOK,MAAQD,EACfJ,EAAOmC,MAAMC,YAAchC,KAG7BH,EAAME,iBAAiB,SAAS,WAC9BP,EAAUS,MAAQ,GAClBL,EAAOK,MAAQ","sources":["./src/scripts.js"],"sourcesContent":["// formulas from https://css-tricks.com/converting-color-spaces-in-javascript/\nconst userInput = document.getElementById('hex');\nconst convert = document.getElementById('convert');\nconst result = document.getElementById('result');\nconst reset = document.getElementById('reset');\n\nconst regex = /^(#)?[a-fA-F0-9]{3}$|^(#)?[a-fA-F0-9]{4}$|^(#)?[a-fA-F0-9]{6}$|^(#)?[a-fA-F0-9]{8}$/;\n\nfunction calculateHSL(inp) {\n  // first check hex format is right, else return\n  const isHex = regex.test(inp);\n  if (!isHex) throw new Error(`${inp} not valid (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª`);\n  // strip the #\n  const hex = inp.replace('#', '');\n  // get input length\n  const hexLength = hex.length;\n\n  // check if it has alpha channel\n  const hasAlpha = hexLength === 4 || hexLength === 8;\n\n  // hex to rgb (add '0x' in front and convert to Int to get decimal from haxdecimals üòâ)\n  let r;\n  let g;\n  let b;\n  let a;\n\n  // check which length\n  if (hexLength === 6 || hexLength === 8) {\n    r = +`0x${hex[0]}${hex[1]}`;\n    g = +`0x${hex[2]}${hex[3]}`;\n    b = +`0x${hex[4]}${hex[5]}`;\n    if (hasAlpha) a = +`0x${hex[6]}${hex[7]}`;\n  } else if (hexLength === 3 || hexLength === 4) {\n    r = +`0x${hex[0]}${hex[0]}`;\n    g = +`0x${hex[1]}${hex[1]}`;\n    b = +`0x${hex[2]}${hex[2]}`;\n    if (hasAlpha) a = +`0x${hex[3]}${hex[3]}`;\n  } else throw new Error(`${inp} not valid (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª`);\n\n  // convert rgb to hsl:\n  // 1. divide by 255\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  if (hasAlpha) a = (a / 255).toFixed(2);\n\n  // 2. get max, min, and difference between max and min\n  const min = Math.min(r, g, b);\n  const max = Math.max(r, g, b);\n  const delta = max - min;\n\n  // 3. calculate Hue\n  let h;\n  // no difference between channels\n  if (delta === 0) h = 0;\n  // formulas for each channel\n  else if (max === r) h = ((g - b) / delta) % 6;\n  else if (max === g) h = (b - r) / delta + 2;\n  else if (max === b) h = (r - g) / delta + 4;\n  // get degrees\n  h = Math.round(h * 60);\n  // only positives under 360\n  if (h < 0) h += 360;\n\n  // 4. calculate Lightness\n  let l = (max + min) / 2;\n\n  // 5. calculate Saturation\n  let s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n  // L and S to hundreds (for percent)\n  l = +(l * 100).toFixed(0);\n  s = +(s * 100).toFixed(0);\n\n  // üöÄ out hsl (or hsla) formatted for css\n  if (hasAlpha) return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n  return `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconvert.addEventListener('click', () => {\n  const output = userInput.value\n    // strip commas, spaces, newlines, empty, etc.\n    .split(',')\n    .map((h) => h.replace(/ /g, ''))\n    .map((h) => h.replace(/\\n/g, ''))\n    .filter((h) => h !== '')\n    // get hsl\n    .map((h) => calculateHSL(h))\n    // into string with newlines\n    .join('\\n');\n\n  result.value = output;\n  result.style.borderColor = output;\n});\n\nreset.addEventListener('click', () => {\n  userInput.value = '';\n  result.value = '';\n});\n"],"names":["$fca4645c7fb85ea554443c0fcbf9be9a$var$userInput","document","getElementById","$fca4645c7fb85ea554443c0fcbf9be9a$var$convert","$fca4645c7fb85ea554443c0fcbf9be9a$var$result","$fca4645c7fb85ea554443c0fcbf9be9a$var$reset","$fca4645c7fb85ea554443c0fcbf9be9a$var$regex","addEventListener","output","value","split","map","h","replace","filter","inp","test","isHex","Error","r","g","b","a","hex","hexLength","length","hasAlpha","concat","toFixed","min","Math","max","delta","round","l","s","abs","$fca4645c7fb85ea554443c0fcbf9be9a$var$calculateHSL","join","style","borderColor"],"version":3,"file":"index.60c83100.js.map"}